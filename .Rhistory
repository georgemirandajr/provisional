m <- matrix(1:x^2, nrow = x)
makecacheinverse <<- ginv(m)
}
makeCacheMatrix(1000)
makeCacheMatrix <- function(x = matrix()) {
m <- matrix(1:x^2, nrow = x)
makecacheinverse <<- ginv(m)
}
?lapply
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
?runif
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
View(x)
x
lapply(x, function(elt) elt[, 1])
lapply(x, function(pop) pop[,1])
lapply(x, function(shitstorm) shitstorm[,1] shitstorm[,2])
lapply(x, function(shitstorm) shitstorm[,2])
?lapply
lapply(x, function(shitstorm) shitstorm[,2], mean)
lapply(x, function(shitstorm) shitstorm[,2], function(pop) pop[,1])
sapply(x, function(shitstorm) shitstorm[,1])
install.packages("shiny")
library(datasets)
data(iris)
View(`001`)
View(iris)
?split
split(iris)
split(iris, Species)
split(iris, iris$Species)
?tapply
tapply(iris, iris$Sepal.Length, "mean", simplify = TRUE)
tapply(iris$Sepal.Length, iris$Species, "mean", simplify = TRUE)
X <- tapply(iris, iris$Sepal.Length, "mean", simplify = TRUE)
X <- tapply(iris$Sepal.Length, iris$Species, "mean", simplify = TRUE)
plot(x)
?plot
plot(x, iris$Species)
View(x)
View(X)
plot(X, iris$Species)
plot(X)
plot(X, ylab = "Employee Mean", xlab = "Employee")
?plot
plot(X, ylab = "Employee Mean", xlab = "Employee", type = "h")
?plot
plot(X, ylab = "Employee Mean", xlab = "Employee", type = "h")
?plot
tapply(iris$Sepal.Length, iris$Species, "mean")
tapply(iris$Sepal.Length, iris$Species, "mean", simplify = FALSE)
?apply
apply(iris[1:4], 2, mean)
data(mtcars)
View(mtcars)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean, simplify = TRUE)
tapply(mtcars$hp, mtcars$cyl, mean, simplify = TRUE)
?sub
?substr
hp <- tapply(mtcars$hp, mtcars$cyl, mean, simplify = TRUE)
hp[,1] - hp[,3]
hp[1] - hp[3]
hp[3] - hp[1]
apply(mtcars$hp, mtcars$cyl, mean, simplify = TRUE)
rm(hp)
apply(mtcars$hp, mtcars$cyl, mean, simplify = TRUE)
sapply(mtcars$hp, mtcars$cyl, mean, simplify = TRUE)
?apply
apply(mtcars, 2, mean, simplify = TRUE)
?split
apply(split(mtcars, mtcars$cyl), 2, mean, simplify = TRUE)
length(mtcars)
apply(split(mtcars, cyl), 2, mean, simplify = TRUE)
apply(split(mtcars, mtcars$cyl), 2, "mean", simplify = TRUE)
?apply
split(apply(mtcars, 2, mean, simplify = TRUE), mtcars$cyl)
?sapply
?lapply
?runif
?rnorm
?lapply
str(vapply)
|2| - |5|
str(abs)
?abs
abs(2-5)
abs(x), x<- tapply(mtcars$mpg, mtcars$cyl, mean, simplify = TRUE)
abs(x); x<- tapply(mtcars$mpg, mtcars$cyl, mean, simplify = TRUE)
x<- tapply(mtcars$mpg, mtcars$cyl, mean, simplify = TRUE)
abs(x)
x<- tapply(mtcars$mpg, mtcars$cyl, mean, simplify = TRUE)
abs(x[1]-x[3])
x<- tapply(mtcars$hp, mtcars$cyl, mean, simplify = TRUE)
abs(x[1]-x[3])
makeCacheMatrix <- function(x = matrix()) {
m <- matrix(1:x^2, nrow = x)
makecacheinverse <<- ginv(m)
}
makeCacheMatrix(1:8)
?makeVector
m <- matrix(1:x^2, nrow = x)
m <- matrix(1:x^2)
?ginv
makeCacheMatrix(1:4)
makeCacheMatrix(2)
makeCacheMatrix <- function(x = matrix()) {
m <- matrix(1:x^2, nrow = x)
)
matrix(1:2^2)
makeCacheMatrix <- function(x = matrix()) {
m <- matrix(1:x^2, nrow = x)
makecacheinverse <<- ginv(m)
}
makeCacheMatrix(2)
library("MASS", lib.loc="C:/Program Files/R/R-3.0.3/library")
makeCacheMatrix <- function(x = matrix()) {
m <- matrix(1:x^2, nrow = x)
makecacheinverse <<- ginv(m)
}
makeCacheMatrix(2)
View(makeCacheMatrix)
View(makecacheinverse)
str(matrix)
makeCacheMatrix <- function(x = matrix()) {
m <<- matrix(1:x^2, nrow = x)
makecacheinverse <<- ginv(m)
}
makeCacheMatrix(2)
View(m)
View(makecacheinverse)
View(makecacheinverse)
makeCacheMatrix(3)
?if
cacheSolve <- function(x, ...) {
if(!is.null(makeCacheInverse)) {
return(makeCacheInverse)
}
data <- matrix(1:x^2, nrow = x)
m <<- ginv(data)
m     ## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix(3)
cacheSolve <- function(x, ...) {
if(!is.null(makecacheinverse)) {
return(makecacheinverse)
}
data <- matrix(1:x^2, nrow = x)
m <<- ginv(data)
m     ## Return a matrix that is the inverse of 'x'
}
View(makecacheinverse)
cacheSolve(3)
cacheSolve(6)
makeCacheMatrix(6)
makeCacheMatrix()
cacheSolve()
View(makecacheinverse)
rankhospital <- function(state, outcome, num = "best") {
o <- read.csv("C:/Users/e525902/Documents/ProgrammingAssignment3/outcome-of-care-measures.csv", na.strings = c("Not Available"), colClasses = "character")
df <- o[, c("Hospital.Name", "State", "Heart.Attack", "Heart.Failure", "Pneumonia")]
colnames(df) <- c("Hospital Name", "State", "heart attack", "heart failure", "pneumonia")
s <- unique(o$State)
condition <- c("heart attack", "heart failure", "pneumonia")
y <- is.element(outcome, condition)
z <- is.element(state, s)
if (z == FALSE) {
stop("invalid state")
} else if
(y == FALSE) {
stop("invalid outcome")
}
b <- df[df$State == state, c("Hospital Name", outcome)]
clean <<- na.omit(b)
ordered <- clean[order(as.numeric(clean[,2]), clean[,1]),]
if(num == "best") {
print(ordered[1,1])
} else if(num == "worst") {
a <- tail(ordered, 1)
print(a[1,1])
}
else {
print(ordered[num, 1])
}
}
rankhospital("MD", "heart attack", "worst")
?tail
tail(clean)
tail(clean, 1)
tail(clean, 6)
a <- tail(clean, 1)
View(a)
print(a)
print(a[,1])
View(clean)
View(`001`)
View(clean)
o <- read.csv("C:/Users/e525902/Documents/ProgrammingAssignment3/outcome-of-care-measures.csv", na.strings = c("Not Available"), colClasses = "character")
View(o)
head(split(o))
head(split(o, o$State))
df <- o[, c("Hospital.Name", "State", "Heart.Attack", "Heart.Failure", "Pneumonia")]
View(df)
split(df, df$State)
print(df$WY)
lapply(split(df, df$UT))
split(df, df$State) <- data.frame
split(df, df$State) <- split(df$WY)
split(1:9, 1:3)
head(split(df, df$State), 3)
bystate <- split(df, df$State)
data.frame(bystate) -> x
View(AK)
View("AK")
View(bystate)
install.packages("plyr")
install.packages("C:/Users/e525902/plyr_1.8.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/e525902/plyr_1.8.1.tar.gz", repos = NULL, type = "source")
rm(001)
rm(`001`)
rm(a)
View(clean)
rankhospital <- function(state, outcome, num = "best") {
o <- read.csv("C:/Users/e525902/Documents/ProgrammingAssignment3/outcome-of-care-measures.csv", na.strings = c("Not Available"), colClasses = "character")
df <- o[, c("Hospital.Name", "State", "Heart.Attack", "Heart.Failure", "Pneumonia")]
colnames(df) <- c("Hospital Name", "State", "heart attack", "heart failure", "pneumonia")
s <- unique(o$State)
condition <- c("heart attack", "heart failure", "pneumonia")
y <- is.element(outcome, condition)
z <- is.element(state, s)
if (z == FALSE) {
stop("invalid state")
} else if
(y == FALSE) {
stop("invalid outcome")
}
b <- df[df$State == state, c("Hospital Name", outcome)]
clean <<- na.omit(b)
ordered <<- clean[order(as.numeric(clean[,2]), clean[,1]),]
if(num == "best") {
print(ordered[1,1])
} else if(num == "worst") {
a <- tail(ordered, 1)
print(a[1,1])
}
else {
print(ordered[num, 1])
}
}
rankhospital("AL", "heart attack", "best")
rankhospital <- function(state, outcome, num = "best") {
o <- read.csv("C:/Users/e525902/Documents/ProgrammingAssignment3/outcome-of-care-measures.csv", na.strings = c("Not Available"), colClasses = "character")
df <- o[, c("Hospital.Name", "State", "Heart.Attack", "Heart.Failure", "Pneumonia")]
colnames(df) <- c("Hospital Name", "State", "heart attack", "heart failure", "pneumonia")
s <- unique(o$State)
condition <- c("heart attack", "heart failure", "pneumonia")
y <- is.element(outcome, condition)
z <- is.element(state, s)
if (z == FALSE) {
stop("invalid state")
} else if
(y == FALSE) {
stop("invalid outcome")
}
b <- df[df$State == state, c("Hospital Name", outcome)]
clean <<- na.omit(b)
ordered <- clean[order(as.numeric(clean[,2]), clean[,1]),]
if(num == "best") {
print(ordered[1,1])
} else if(num == "worst") {
a <- tail(ordered, 1)
print(a[1,1])
}
else {
print(ordered[num, 1])
}
}
rankhospital("AL", "heart attack", "best")
rownames(df)
rownames(clean)
View(clean)
row.names(clean)
house <- read.table("C:/Users/e525902/Documents/ExData_Plotting1/household_power_consumption.txt", header = T, sep = ";")
View(house)
house2 <- house[Date == 01/02/2007, ]
house <- data.table(house)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("rtools")
install.packages(c("r", "tools"))
install.packages(c("r", "tools"))
install.packages(c("r", "tools"))
install.packages(c("r", "tools"))
install.packages(c("r", "tools"))
install.packages(c("r", "tools"))
install.packages("rmysql")
install.packages("RMySQL")
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
?dbReadTable
?RMySQL
library("RMySQL")
library(RMySQL)
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
install.packages("httr")
library("rhdf5", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("httr")
install.packages("C:/Program Files/R/R-3.0.3/library/httr_0.3.tar.gz", repos = NULL, type = "source")
install.packages("C:/Program Files/R/R-3.0.3/library/httr_0.3.tar.gz", repos = NULL, type = "source")
library("httr", lib.loc="C:/Program Files/R/R-3.0.3/library")
myapp = oauth_app("github", key="1b3126177d0dac0c3710", secret="e39bafd5eaa8834388f34fb1fd4c50339a17db3b")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("jsonlite")
library("httr", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("jsonlite", lib.loc="C:/Program Files/R/R-3.0.3/library")
github <- fromJSON("https://api.github.com/users/jtleek/repos")
View(github)
names(github)
github$name
github$created_at
data.frame(github$name, github$created_at)
install.packages("sqldf")
library("sqldf", lib.loc="C:/Program Files/R/R-3.0.3/library")
acs <- read.csv(file.choose(), header=TRUE)
View(acs)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
a <- sqldf("select pwgtp1 from acs where AGEP < 50")
View(a)
b <- sqldf("select * from acs where AGEP < 50 and pwgtp1")
View(b)
c <- sqldf("select pwgtp1 from acs")
View(c)
d <- unique(acs$AGEP)
View(d)
e <- sqldf("select distinct AGEP from acs")
View(e)
f <- sqldf("select AGEP where unique from acs")
f <- sqldf("select unique * from acs")
f <- sqldf("select unique AGEP from acs")
install.packages("nlme")
install.packages("lattice")
?nlme
library("lattice", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("nlme", lib.loc="C:/Program Files/R/R-3.0.3/library")
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
xyplot(weight ~ Time | Diet, BodyWeight) { llines(median(weight), col = 2)}
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom, "smooth")
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.0.3/library")
qplot(Wind, Ozone, data = airquality, geom, "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
fileUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse(http://biostat.jhsph.edu/~jleek/contact.html, useInternal = TRUE)
doc <- xmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html", useInternal = TRUE)
data <- fromJSON("http://biostat.jhsph.edu/~jleek/contact.html")
library(JSON)
library("jsonlite", lib.loc="C:/Program Files/R/R-3.0.3/library")
data <- fromJSON("http://biostat.jhsph.edu/~jleek/contact.html")
data <- fromJSON("http://biostat.jhsph.edu/~jleek/contact.html")
?xmlTreeParse
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
url2 <- "http://www.w3schools.com/sml/simple.xml"
doc <- xmlTreeParse(url2, useInternal = TRUE)
url2 <- "http://www.w3schools.com/xml/simple.xml""
""
url2 <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(url2, useInternal = TRUE)
fileUrl
fileUrl <- "http://www.biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
fileUrl
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
x <- fromJSON(fileUrl)
x <- fromJSON("fileUrl")
x <- fromJSON("http://www.biostat.jhsph.edu")
fileUrl <- "http://www.biostat.jhsph.edu"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
library(RWeka)
library(stringr)
library(stringi)
library(slidify)
library(ggplot2)
library(reshape2)
library(pander)
setwd("X:/Ballot Accountability/work cell")
historical <<- read.csv("./historical.csv")
historical$Volume <- gsub(",", "", historical$Volume)
historical$Volume <- as.numeric(historical$Volume)
historical$Diff <- gsub(",", "", historical$Diff)
historical$Diff <- as.numeric(historical$Diff)
historical$Election <- as.Date(historical$Election, format = "%m/%d/%Y")
colnames(historical) <- c("Election", "Volume", "Discrepancies")
View(historical)
historical <- mutate(historical, Pct = Discrepancies/Volume)
library(plyr)
historical <- mutate(historical, Pct = Discrepancies/Volume)
View(historical)
historical <- mutate(historical, Pct = (Discrepancies/Volume)*100)
View(historical)
historical <- mutate(historical, Pct = round(Discrepancies/Volume)*100,3)
View(historical)
historical <<- read.csv("./historical.csv")
historical$Volume <- gsub(",", "", historical$Volume)
historical$Volume <- as.numeric(historical$Volume)
historical$Diff <- gsub(",", "", historical$Diff)
historical$Diff <- as.numeric(historical$Diff)
historical$Election <- as.Date(historical$Election, format = "%m/%d/%Y")
historical <<- read.csv("./historical.csv")
historical$Volume <- gsub(",", "", historical$Volume)
historical$Volume <- as.numeric(historical$Volume)
historical$Diff <- gsub(",", "", historical$Diff)
historical$Diff <- as.numeric(historical$Diff)
historical$Election <- as.Date(historical$Election, format = "%m/%d/%Y")
colnames(historical) <- c("Election", "Volume", "Discrepancies")
historical <- mutate(historical, Pct = (Discrepancies/Volume)*100)
View(historical)
historical[4,]
?setnames
setname
?setname
?rename
?setnames
historical <- setnames(historical, "Pct", "percent")
historical <- setname(historical, "Pct", "percent")
library(data.table)
historical <- setnames(historical, "Pct", "percent")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
historical <- setnames(historical, "Pct", "percent")
library(stringr)
historical <- setnames(historical, "Pct", "percent")
library(data.table)
library(dplyr)
library(stringr)
install.packages("data.table")
library(data.table)
library(dplyr)
library(stringr)
historical <- setnames(historical, "Pct", "percent")
historical <- setnames(historical, "Diff", "Pct")
install.packages("grid")
comparison <- read.csv("./comparison.csv")
View(comparison)
View(comparison)
comparison$Date <- as.POSIXct(comparison$Date)
comparison$Date <- as.POSIXct(comparison$Date, format = "%m/%d/%Y")
View(comparison)
plot(comparison$Date, pctStaffWC)
plot(comparison$Date, comparison$pctStaffWC)
plot(comparison$Date, comparison$pctStaffWC, type = "l")
require(ggplot2)
require(reshape2)
em <- melt(historical, id = "Election")
View(em)
View(historical)
melt <- melt(comparison, id = "Date")
View(melt)
p <- qplot(Date, value, data = melt, geom = "line", group = variable)
p
comparison <- read.csv("./comparison.csv")
comparison$Date <- as.POSIXct(comparison$Date, format = "%m/%d/%Y")
melt <- melt(comparison, id = "Date")
p <- qplot(Date, value, data = melt, geom = "line", group = variable)
p
p+facet_grid(variable ~ ., scale = "free_y") + geom_line(aes(colour = variable, size=0.10))
View(comparison)
comparison$pctStaffWC <- round(comparison$pctStaffWC, 2)
View(comparison)
View(comparison)
ggplot(melt, aes(Date, value, colour = as.factor(variable), group = as.factor(variable))) + geom_line()
